// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "Commands/RandomDriving.h"
#include "Commands/Drive.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
Shooter* Robot::shooter = 0;
Pickup* Robot::pickup = 0;
Climber* Robot::climber = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
	shooter = new Shooter();
	pickup = new Pickup();
	climber = new Climber();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	shooterInFront = new ShooterInFront();
	shooterInMiddle = new ShooterInMiddle();
	shooterInBack = new ShooterInBack();
	
	Prefs = Preferences::GetInstance();
	File = RAWCConstants::getInstance();
	Robot::driveTrain->SetWheelbase(8.25, 22, 8.25);
	Robot::driveTrain->SetMaxSpeed(100);
	
	FLOffset = File->getValueForKey("FLOff");
	FROffset = File->getValueForKey("FROff");
	RLOffset = File->getValueForKey("RLOff");
	RROffset = File->getValueForKey("RROff");
	
	Robot::driveTrain->SetOffsets(FLOffset, FROffset, RLOffset, RROffset);
	
	Robot::driveTrain->frontLeftPos->SetAverageBits(256);
	Robot::driveTrain->frontRightPos->SetAverageBits(256);
	Robot::driveTrain->rearLeftPos->SetAverageBits(256);
	Robot::driveTrain->rearRightPos->SetAverageBits(256);
	
	Robot::driveTrain->frontLeft->Enable();
	Robot::driveTrain->frontRight->Enable();
	Robot::driveTrain->rearLeft->Enable();
	Robot::driveTrain->rearRight->Enable();
	//Robot::climber->angle->Enable();
	Robot::shooter->shooterAngle->Enable();
	
	Prefs->PutFloat("EntrySpeed",-6.5);
	Prefs->PutFloat("ExitSpeed",8);
//	Prefs->PutFloat("ClimberAngleP",0.0);
//	Prefs->PutFloat("ClimberAngleI",0.0);
	Prefs->PutInt("ShooterAngleSetpoint",290);
	
	autoChooser = new SendableChooser();
	autoChooser->AddDefault("Random Driving", new RandomDriving());
	autoChooser->AddObject("Drive 2.0", new Drive(2.0, 3.141/2, .5));
	SmartDashboard::PutData("Autonomous Chooser", autoChooser);
  }
	
void Robot::DisabledPeriodic(){
	Scheduler::GetInstance()->Run();
	
	if (!Robot::oi->getWheelOffset())
	{
		FLOffset = FROffset = RLOffset = RROffset = 512;
		FLOffset = Robot::driveTrain->frontLeftPos->GetAverageValue()-512;
		FROffset = Robot::driveTrain->frontRightPos->GetAverageValue()-512;
		RLOffset = Robot::driveTrain->rearLeftPos->GetAverageValue()-512;
		RROffset = Robot::driveTrain->rearRightPos->GetAverageValue()-512;
				
		File->insertKeyAndValue("FLOff", FLOffset);
		File->insertKeyAndValue("FROff", FROffset);
		File->insertKeyAndValue("RLOff", RLOffset);
		File->insertKeyAndValue("RROff", RROffset);
			
		File->save();
		
		Robot::driveTrain->SetOffsets(FLOffset, FROffset, RLOffset, RROffset);
	}
	
	if (Robot::oi->getDriverJoystick()->GetRawButton(8)) {
	SmartDashboard::PutNumber("FrontLeftPos",Robot::driveTrain->frontLeftPos->GetAverageValue());
	SmartDashboard::PutNumber("FrontRightPos",Robot::driveTrain->frontRightPos->GetAverageValue());
	SmartDashboard::PutNumber("RearLeftPos",Robot::driveTrain->rearLeftPos->GetAverageValue());
	SmartDashboard::PutNumber("RearRightPos",Robot::driveTrain->rearRightPos->GetAverageValue());
	SmartDashboard::PutNumber("SW",Robot::oi->getSteeringWheel());	
	SmartDashboard::PutBoolean("OffsetButton",Robot::oi->getWheelOffset());
	SmartDashboard::PutBoolean("GPad1",Robot::oi->getGamePad()->GetRawButton(1));
	SmartDashboard::PutBoolean("GPad2",Robot::oi->getGamePad()->GetRawButton(2));
	SmartDashboard::PutBoolean("GPad3",Robot::oi->getGamePad()->GetRawButton(3));
	SmartDashboard::PutBoolean("GPad4",Robot::oi->getGamePad()->GetRawButton(4));
	}
}
void Robot::AutonomousInit() {
	autonomousCommand = (Command*) autoChooser->GetSelected();
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	
	if(!Robot::climber->extendLimit->Get())
		Robot::climber->anglePos->ResetAccumulator();
	
	if (Robot::oi->getDriverJoystick()->GetRawButton(8)) {
		
	SmartDashboard::PutNumber("FrontLeftPos",Robot::driveTrain->frontLeftPos->GetAverageValue());
	SmartDashboard::PutNumber("FrontRightPos",Robot::driveTrain->frontRightPos->GetAverageValue());
	SmartDashboard::PutNumber("RearLeftPos",Robot::driveTrain->rearLeftPos->GetAverageValue());
	SmartDashboard::PutNumber("RearRightPos",Robot::driveTrain->rearRightPos->GetAverageValue());
	SmartDashboard::PutNumber("SW",Robot::oi->getSteeringWheel());
	SmartDashboard::PutNumber("StickDirection",Robot::oi->getDriverJoystick()->GetDirectionRadians());
	
	SmartDashboard::PutNumber("FLError", Robot::driveTrain->frontLeft->GetError());
	SmartDashboard::PutNumber("FRError", Robot::driveTrain->frontRight->GetError());
	SmartDashboard::PutNumber("RLError", Robot::driveTrain->rearLeft->GetError());
	SmartDashboard::PutNumber("RRError", Robot::driveTrain->rearRight->GetError());
	
	SmartDashboard::PutNumber("FLCurrent", Robot::driveTrain->frontLeftSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("FRCurrent", Robot::driveTrain->frontRightSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("RLCurrent", Robot::driveTrain->rearLeftSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("RRCurrent", Robot::driveTrain->rearRightSteer->GetOutputCurrent());
	
	SmartDashboard::PutNumber("ClimbAngleSetpoint",Robot::climber->angle->GetSetpoint());
	SmartDashboard::PutNumber("ClimberDistance",Robot::climber->climberDistance->GetDistance());
	SmartDashboard::PutNumber("ClimberRaw",Robot::climber->climberDistance->GetRaw());
	SmartDashboard::PutNumber("ClimbAngleError",Robot::climber->angle->GetError());
	SmartDashboard::PutNumber("ClimberAngle",Robot::climber->anglePos->GetAverageValue());
	SmartDashboard::PutNumber("ClimberAngleLeftVolt", Robot::climber->angleLeft->GetOutputVoltage());
	SmartDashboard::PutNumber("ClimberAngleRightVolt", Robot::climber->angleRight->GetOutputVoltage());
	SmartDashboard::PutNumber("ClimberAngleLeftCurrent", Robot::climber->angleLeft->GetOutputCurrent());
	SmartDashboard::PutNumber("ClimberAngleRightCurrent", Robot::climber->angleRight->GetOutputCurrent());
	SmartDashboard::PutBoolean("ExtendLimit", Robot::climber->extendLimit->Get());
	SmartDashboard::PutBoolean("RetractLimit", Robot::climber->retractLimit->Get());
	
	SmartDashboard::PutNumber("FLCurrent",Robot::driveTrain->frontLeftSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("FRCurrent",Robot::driveTrain->frontRightSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("RLCurrent",Robot::driveTrain->rearLeftSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("RRCurrent",Robot::driveTrain->rearRightSteer->GetOutputCurrent());
	
	SmartDashboard::PutNumber("ShooterAngleError",Robot::shooter->shooterAngle->GetError());
	SmartDashboard::PutNumber("ShooterAngleVolts",Robot::shooter->shooterAngleSteer->GetOutputVoltage());
	SmartDashboard::PutNumber("ShooterAngleSetpoint",Robot::shooter->shooterAngle->GetSetpoint());
	SmartDashboard::PutNumber("ShooterAngleInput",Robot::shooter->shooterAnglePos->GetAverageValue());
	SmartDashboard::PutNumber("EntryVoltage", Robot::shooter->wheelShooterEntry->GetOutputVoltage());
	SmartDashboard::PutNumber("ExitVoltage", Robot::shooter->wheelShooterExit->GetOutputVoltage());
	SmartDashboard::PutNumber("EntryCurrent", Robot::shooter->wheelShooterEntry->GetOutputCurrent());
	SmartDashboard::PutNumber("ExitCurrent", Robot::shooter->wheelShooterExit->GetOutputCurrent());
	}
//	Robot::climber->angle->SetPID(Prefs->GetFloat("ClimberAngleP",.001),Prefs->GetFloat("ClimberAngleI",0.0),0);
}
void Robot::TestPeriodic() {
	lw->Run();
}
START_ROBOT_CLASS(Robot);
