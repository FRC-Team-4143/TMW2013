// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "Commands/NoneAuto.h"

//#define STEERPOW 1.0

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	
	Prefs = Preferences::GetInstance();
	File = RAWCConstants::getInstance();
	Robot::driveTrain->SetWheelbase(21.5/2, 21.5/2, 21.5/2);
	Robot::driveTrain->SetMaxSpeed(10);

  printf("getting offsets\r\n");
	
	FLOffset = File->getValueForKey("FLOff");
	FROffset = File->getValueForKey("FROff");
	RLOffset = File->getValueForKey("RLOff");
	RROffset = File->getValueForKey("RROff");

  printf("done getting offsets\r\n");
	
	Robot::driveTrain->SetOffsets(FLOffset, FROffset, RLOffset, RROffset);
	
//	Robot::driveTrain->frontLeftPos->SetAverageBits(256);
//	Robot::driveTrain->frontRightPos->SetAverageBits(256);
//	Robot::driveTrain->rearLeftPos->SetAverageBits(256);
//	Robot::driveTrain->rearRightPos->SetAverageBits(256);
		
	Robot::driveTrain->frontLeftPos->Start();
	Robot::driveTrain->frontRightPos->Start();
	Robot::driveTrain->rearLeftPos->Start();
	Robot::driveTrain->rearRightPos->Start();

	Robot::driveTrain->frontLeft->Enable();
	Robot::driveTrain->frontRight->Enable();
	Robot::driveTrain->rearLeft->Enable();
	Robot::driveTrain->rearRight->Enable();
	
	if(!Prefs->ContainsKey("SteerScaling"))
		Prefs->PutFloat("SteerScaling",1.25);
	
	autoChooser = new SendableChooser();
	autoChooser->AddObject("1. None", new NoneAuto());
	autoChooser->AddObject("2. None1", new NoneAuto());
	SmartDashboard::PutData("AutonomousChooser", autoChooser);

  	printf("writeing i2c\r\n");
	RobotMap::m_i2c->SetCompatibilityMode(true);
	RobotMap::m_i2c->Write('a', 'a');
	RobotMap::m_i2c->Write('a', 'b');
	RobotMap::m_i2c->Write('a', 'c');
	RobotMap::m_i2c->Write('b', 'A');
	RobotMap::m_i2c->Write('b', 'B');
	RobotMap::m_i2c->Write('b', 'C');
  	printf("done i2c\r\n");
		
}
	
void Robot::DisabledPeriodic(){
	Scheduler::GetInstance()->Run();
}
void Robot::AutonomousInit() {
	//Robot::driveTrain->rearLeft->SetOutputRange(-1, 1);
	//Robot::driveTrain->rearRight->SetOutputRange(-1, 1);
	//Robot::driveTrain->frontRight->SetOutputRange(-1, 1);
	//Robot::driveTrain->frontLeft->SetOutputRange(-1, 1);
	//Robot::driveTrain->SetDriveBackFlag(false);
	autonomousCommand = (Command*) autoChooser->GetSelected();
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	
}	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
	//Robot::driveTrain->rearLeft->SetOutputRange(-STEERPOW, STEERPOW);
	//Robot::driveTrain->rearRight->SetOutputRange(-STEERPOW, STEERPOW);
	//Robot::driveTrain->frontRight->SetOutputRange(-STEERPOW, STEERPOW);
	//Robot::driveTrain->frontLeft->SetOutputRange(-STEERPOW, STEERPOW);
}
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
		
}
void Robot::TestPeriodic() {
	lw->Run();
}
START_ROBOT_CLASS(Robot);
