// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/ClimberPullDown.h"
#include "Commands/ClimberPullUnder.h"
#include "Commands/CrabDrive.h"
#include "Commands/Drive.h"
#include "Commands/DropDisk.h"
#include "Commands/OperatorClimb.h"
#include "Commands/PickupPosition.h"
#include "Commands/PivotDrive.h"
#include "Commands/RandomDriving.h"
#include "Commands/SetClimberDistanceHome.h"
#include "Commands/SetWheelOffsets.h"
#include "Commands/ShooterAtDefinedOutput.h"
#include "Commands/ShooterStop.h"
#include "Commands/SteerDrive.h"
#include "Commands/TargetDrive.h"
#include "Commands/ToggleFront.h"
#include "Commands/TurnRobot.h"
#include "Commands/TurnWheels.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driverJoystick = new Joystick(1);
	
	joystickButton2 = new JoystickButton(driverJoystick, 2);
	joystickButton2->WhileHeld(new TargetDrive());
	wheelOffsetButton = new JoystickButton(driverJoystick, 6);
	wheelOffsetButton->WhenPressed(new SetWheelOffsets());
	trigger = new JoystickButton(driverJoystick, 1);
	trigger->WhileHeld(new CrabDrive());
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("ShooterAtDefinedOutput", new ShooterAtDefinedOutput());
	SmartDashboard::PutData("DropDisk", new DropDisk());
	SmartDashboard::PutData("ClimberPullDown", new ClimberPullDown());
	SmartDashboard::PutData("ClimberPullUnder", new ClimberPullUnder());
	SmartDashboard::PutData("SetClimberDistanceHome", new SetClimberDistanceHome());
	SmartDashboard::PutData("ToggleFront", new ToggleFront());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
bool OI::getWheelOffset() {
	return DriverStation::GetInstance()->GetDigitalIn(1);
}
Joystick* OI::getDriverJoystick() {
	return driverJoystick;
}
double OI::getSteeringWheel() {
	return DriverStation::GetInstance()->GetAnalogIn(2);
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
