// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Drive.h"
Drive::Drive(float speed, float driveangle, float twistangle, float timeout) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	X = speed*sin(driveangle*3.14159/180);
	Y = speed*cos(driveangle*3.14159/180);
	TwistAngle = twistangle;
	Timeout = timeout;
}
// Called just before this Command runs the first time
void Drive::Initialize() {
	SetTimeout(Timeout);
	ontarget = 0;
}
// Called repeatedly when this Command is scheduled to run
void Drive::Execute() {
	if(!IsTimedOut())
	{
		Twist = (TwistAngle - Robot::driveTrain->gyroscope->GetAngle())/150;
		if(Twist>.2)
			Twist=.2;
		if(Twist<-.2)
			Twist=-.2;
		Robot::driveTrain->Pivot(Twist, Y, X, true);
	}
	else
	{
		Twist = (TwistAngle - Robot::driveTrain->gyroscope->GetAngle())/40;
		if(Twist>.4)
			Twist=.4;
		if(Twist<-.4)
			Twist=-.4;
		Robot::driveTrain->Pivot(Twist, 0, 0, true);
		
		if(fabs(TwistAngle - Robot::driveTrain->gyroscope->GetAngle()) < 3)
			ontarget ++;
		else
			ontarget = 0;
	}
}
// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished() {
	return IsTimedOut() && ontarget > 5;
}
// Called once after isFinished returns true
void Drive::End() {
	Robot::driveTrain->SideLock();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted() {
	Robot::driveTrain->SideLock();
}
