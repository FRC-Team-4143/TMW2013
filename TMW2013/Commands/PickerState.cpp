// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

#include "PickerState.h"

PickerState::PickerState(int rightwing, int rightroller, int leftwing, int leftroller, float timeout) {
	Requires(Robot::picker);
	SetTimeout(timeout);
	Rightwing = rightwing;
	Rightroller = rightroller;
	Leftwing = leftwing;
	Leftroller = leftroller;
}

// Called just before this Command runs the first time
void PickerState::Initialize() {
  printf("PickerState called\n");

  if(Rightwing == WINGOUT)
	Robot::picker->RightWingOut();
  else if(Rightwing == WINGIN)
	Robot::picker->RightWingIn();
  else
	Robot::picker->RightWingStay();

  if(Leftwing == WINGOUT)
	Robot::picker->LeftWingOut();
  else if(Leftwing == WINGIN)
	Robot::picker->LeftWingIn();
  else
	Robot::picker->LeftWingStay();

  if(Rightroller)
	Robot::picker->RightRollerIntake();
  else
	Robot::picker->RightRollerOff();

  if(Leftroller)
	Robot::picker->LeftRollerIntake();
  else
	Robot::picker->LeftRollerOff();
}

// Called repeatedly when this Command is scheduled to run
void PickerState::Execute() {
}
// Make this return true when this Command no longer needs to run execute()
bool PickerState::IsFinished() {
	return IsTimedOut();
}
// Called once after isFinished returns true
void PickerState::End() {
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PickerState::Interrupted() {
}
