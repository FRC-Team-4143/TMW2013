// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

#define WINGTIME 10
#define MINSHOOT 15
#define SHOOTZONE .5

#include "ShootCommand.h"
ShootCommand::ShootCommand(Joystick * joystick) {
	Requires(Robot::picker);
	SetTimeout(1.5);
	Joystick1 = joystick;
	DS = DriverStation::GetInstance();
  	Prefs = Preferences::GetInstance();
	if(joystick)
		automode = false;
	else
		automode = true;
}

// Called just before this Command runs the first time
void ShootCommand::Initialize() {
  //CamStop = Prefs->GetFloat("CamStop", 1.5);

  WingDelay = DS->GetDigitalIn(8);
  CamStop = DS->GetAnalogIn(1);

  loops = 1;
  printf("ShootCommand called\n");
  if(Joystick1 != NULL && Joystick1->GetRawAxis(3) > -.5)  // right trigger safety
        loops = 0; // loop will be 1 first time through loop
  else {
	if(automode)
	{
 		Robot::picker->StartShooter(1.0); //full power
	}
	else
	{	
		Robot::picker->Shooting();
 		Robot::picker->RightWingOut(); 
 	 	Robot::picker->LeftWingOut(); 
		if(!WingDelay)
 	 		Robot::picker->StartShooter(1.0); //full power
	}
  }
}

// Called repeatedly when this Command is scheduled to run
void ShootCommand::Execute() {
	loops++;

	if(!automode && loops == WINGTIME)
	{
 	 	Robot::picker->RightWingStay(); 
 	 	Robot::picker->LeftWingStay(); 
		if(WingDelay)
 	 		Robot::picker->StartShooter(1.0); //full power
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ShootCommand::IsFinished() {
	if(loops == 1) return true; // no safety
	if(IsTimedOut()) return true;

	if(loops <= MINSHOOT + (WINGTIME*WingDelay))
		return false;

	float x = Robot::picker->GetShooterPot();

	if(x > CamStop && 
		x < (CamStop + SHOOTZONE) )
		return true;
	else
		return false;
}
// Called once after isFinished returns true
void ShootCommand::End() {
	Robot::picker->StopShooter();
	printf("ShootCommand End\n");
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShootCommand::Interrupted() {
	Robot::picker->StopShooter();
	printf("ShootCommand interrupted\n");
}
