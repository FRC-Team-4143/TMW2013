// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OperatorClimb.h"
OperatorClimb::OperatorClimb():
GPad(2)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::climber);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void OperatorClimb::Initialize() {
	climberset = Robot::climber->anglePos->GetAverageValue();
	button4press = false;
	button2press = false;
}
// Called repeatedly when this Command is scheduled to run
void OperatorClimb::Execute() {
	if ((GPad.GetRightY() < 0 && !Robot::climber->retractLimit->Get()) || (GPad.GetRightY() > 0 && !Robot::climber->extendLimit->Get())) {
		Robot::climber->climbLeft->Set(0);
		Robot::climber->climbRight->Set(0);
	}
	else {
		Robot::climber->climbLeft->Set(GPad.GetRightY());
		Robot::climber->climbRight->Set(GPad.GetRightY());
	}
		
	
	Robot::climber->angleLeft->Set(GPad.GetLeftY());
	Robot::climber->angleRight->Set(-GPad.GetLeftY());
	
	/*
	if(fabs(GPad.GetLeftY()) > .02)
	climberset = climberset - GPad.GetLeftY();
	
	Robot::climber->SetAngle(int(climberset));
	*/
}
// Make this return true when this Command no longer needs to run execute()
bool OperatorClimb::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void OperatorClimb::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void OperatorClimb::Interrupted() {
}
