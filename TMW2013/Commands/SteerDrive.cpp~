// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "SteerDrive.h"
SteerDrive::SteerDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	pi = 3.14159;
}
// Called just before this Command runs the first time
void SteerDrive::Initialize() {
	Prefs = Preferences::GetInstance();
}
// Called repeatedly when this Command is scheduled to run
void SteerDrive::Execute() {
	radian = (Robot::oi->getSteeringWheel()-0.264)*1.418; //converts SW input to radians
	
	scalingFactor = Prefs->GetFloat("SteerScaling",1.5); //obtain the scaling factor from prefs
	
	//Scale the input to flatten the curve out in the center of the range
	if(radian <= pi/2)
		correctedradians = (-(pi/2)/pow(pow(-pi/2,2),scalingFactor/2))*pow(pow(radian-pi/2,2),scalingFactor/2) + pi/2;
	else 
		correctedradians = ((pi/2)/pow((pi/2),scalingFactor))*pow(radian-pi/2,scalingFactor) + pi/2;
	
	//Previous method of scaling the steering input.  This was caused a significant jump in the turn at the edges.  Was replaced by above.
/*	
	if(radian > 3.14159*15/16 || radian < 3.14159/16)
		correctedradians = radian;
	else if(radian >= 3.14159/2)
		correctedradians = (radian - 3.14159/2)/2 + 3.14159/2;
	else
		correctedradians = 3.14159/2 - (3.14159/2 - radian)/2;
*/		
	speed = Robot::oi->getDriverJoystick()->GetY(); // obtain the joystick input for the speed
	Robot::driveTrain->Steer(correctedradians, speed, 0.5);	//set the turning angle, speed, and robot geometry for turn
}
// Make this return true when this Command no longer needs to run execute()
bool SteerDrive::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void SteerDrive::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SteerDrive::Interrupted() {
}
