// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Steer.h"
#include "math.h"
Steer::Steer():
pi(3.14159), A(.5), W(26), X(30), Y(26), thetaRC(0.0), FRRatio(0.0), FLRatio(0.0), 
RRRatio(0.0), RLRatio(0.0)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void Steer::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void Steer::Execute() {
	
	radian = (Robot::oi->getSteeringWheel()-0.264)*1.418; //converts SW input to radians
	
	thetaRC = pi - radian;  //convert steering angle to rear center wheel angle
	
	if(thetaRC != pi / 2)	//If we are not driving straight forward...
	{
		if(thetaRC < pi / 2)	//Right Turn
		{
			this->RightTurn4Wheels();
		}
		else if(thetaRC > pi / 2)	//Left Turn
		{
			this->LeftTurn4Wheels();
		}
	}
	else	//thetaRC = pi / 2
	{
		thetaFL = pi / 2;
		thetaFR = pi / 2;
		thetaRL = pi / 2;
		thetaRR = pi / 2;
		FLRatio = 1;
		FRRatio = 1;
		RLRatio = 1;
		RRRatio = 1;
	}
	//Solve for fastest wheel speed
	double speedarray[] = {fabs(FL), fabs(FR), fabs(RL), fabs(RR)};
		
	 int length = 4;
     double maxspeed = speedarray[0];
     for(int i = 1; i < length; i++)
     {
          if(speedarray[i] > maxspeed)
                maxspeed = speedarray[i];
     }
		 
	//Set ratios based on maximum wheel speed
	FLRatio = FL/maxspeed;
	FRRatio = FR/maxspeed;
	RLRatio = RL/maxspeed;
	RRRatio = RR/maxspeed;
	
	//Set drive speeds
	Robot::driveTrain->frontLeftDrive->Set(-FLRatio*Robot::oi->getDriverJoystick()->GetY());
	Robot::driveTrain->frontLeftDrive->Set(FRRatio*Robot::oi->getDriverJoystick()->GetY());
	Robot::driveTrain->frontLeftDrive->Set(-RLRatio*Robot::oi->getDriverJoystick()->GetY());
	Robot::driveTrain->frontLeftDrive->Set(RRRatio*Robot::oi->getDriverJoystick()->GetY());
	
	//Set Steering PID Setpoints
	Robot::driveTrain->frontLeft->SetSetpoint(768 - 163.1*thetaFL);
	Robot::driveTrain->frontRight->SetSetpoint(768 - 163.1*thetaFR);
	Robot::driveTrain->rearLeft->SetSetpoint(768 - 163.1*thetaRL);
	Robot::driveTrain->rearRight->SetSetpoint(768 - 163.1*thetaRR);
}
void Steer::LeftTurn4Wheels()
{
	Z = ((A * X) * tan(pi - thetaRC));				//pi was subtracted out of this earlier
	
	thetaRL = pi - atan((Z - W) / (A * X));
	thetaRR = pi - atan((Z + W) / (A * X));
	thetaFR = pi / 2;
	thetaFL = pi / 2;
	
	if(A != 1)
	{
		thetaFL = atan((Z - Y) / ((1 - A) * X));	//These are identical for right and left turns
		thetaFR = atan((Z + Y) / ((1 - A) * X));	//These are identical for right and left turns
	}
	//Solve for radii (wheel speed)
	FL = (Z - Y) / sin(thetaFL);
	FR = (Z + Y) / sin(thetaFR);
	RL = (Z - W) / sin(pi - thetaRL);
	RR = (Z + W) / sin(pi - thetaRR);
}
void Steer::RightTurn4Wheels()
{	
	Z = ((A * X) * tan(thetaRC));				//pi was subtracted out of this earlier
	
	thetaRL = atan((Z + W) / (A * X));
	thetaRR = atan((Z - W) / (A * X));
	thetaFR = pi / 2;
	thetaFL = pi / 2;
	
	if(A != 1)
	{
		thetaFR = pi - atan((Z - Y) / ((1 - A) * X));	//These are identical for right and left turns
		thetaFL = pi - atan((Z + Y) / ((1 - A) * X));	//These are identical for right and left turns
	}
	
	FL = (Z + Y) / sin(pi - thetaFL);
	FR = (Z - Y) / sin(pi - thetaFR);
	RL = (Z + W) / sin(thetaRL);
	RR = (Z - W) / sin(thetaRR);
	
}
// Make this return true when this Command no longer needs to run execute()
bool Steer::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void Steer::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Steer::Interrupted() {
}
