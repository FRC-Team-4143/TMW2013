// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "Math.h"
/**
 *
 *
 * @author ExampleAuthor
 */
class DriveTrain: public Subsystem {
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
	void LeftTurn4Wheels();	//Calculates a left hand turn
	void RightTurn4Wheels();	//Calculates a right hand turn
	
	//Varibles needed to be defined in constructor
	double radian; // input steering angle in radians
	double pi;	//3.14159
	double A;	//A is the ratio of X to turn harder 
	double W;	//W is the distance form the mid-point of one back wheel to the mid-point of the other back wheel
	double X;	//X is the distance form the mid-point of the back wheels to the mid-point of the front wheels 
	double Y;	//Y is the distance from the mid-point of one front wheel to the mid-point of the other font wheel
	
	//Varibles dynamically defined
	double FL;	//FL, distance from Front Left Wheel to the center of rotation
	double FR;	//FR, distance from Front Right Wheel to the center of rotation
	double RL;	//RL, distance from Rear Left Wheel to the center of rotation
	double RR;	//RR, distance from Rear Right Wheel to the center of rotation
	
	double Z;	//Z, distance form A * X to center of rotation
	
	//Varibles accessable by user
	double thetaRC;	//Angle used to calculate all other angles
	
	double thetaFL;	//thetaFL, angle from Front Left Wheel to the center of rotation
	double thetaFR;	//thetaFR, angle from Front Right Wheel to the center of rotation
	double thetaRL;	//thetaRL, angle from Rear Left Wheel to the center of rotation
	double thetaRR;	//thetaRR, angle from Rear Right Wheel to the center of rotation
	double FRRatio;	//Ratio of Speed of Front Right wheel
	double FLRatio;	//Ratio of Speed of Front Left wheel
	double RRRatio;	//Ratio of Speed of Rear Right wheel
	double RLRatio;	//Ratio of Speed of Rear Left wheel
	double position; //Input position for crab
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	AnalogChannel* frontRightPos;
	CANJaguar* frontRightSteer;
	PIDController* frontRight;
	AnalogChannel* frontLeftPos;
	CANJaguar* frontLeftSteer;
	PIDController* frontLeft;
	AnalogChannel* rearRightPos;
	CANJaguar* rearRightSteer;
	PIDController* rearRight;
	AnalogChannel* rearLeftPos;
	CANJaguar* rearLeftSteer;
	PIDController* rearLeft;
	CANJaguar* frontRightDrive;
	CANJaguar* frontLeftDrive;
	CANJaguar* rearRightDrive;
	CANJaguar* rearLeftDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	DriveTrain();
	void InitDefaultCommand();
	void Steer(float radian, float speed);
	void Crab(float radian);
};
#endif
