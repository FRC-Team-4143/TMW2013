// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Climber.h"
#include "../Robotmap.h"
#include "../Commands/OperatorClimb.h"
Climber::Climber() : Subsystem("Climber") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	climbLeft = RobotMap::climberClimbLeft;
	climbRight = RobotMap::climberClimbRight;
	angleRight = RobotMap::climberAngleRight;
	angleLeft = RobotMap::climberAngleLeft;
	anglePos = RobotMap::climberAnglePos;
	angle = RobotMap::climberAngle;
	climberDistance = RobotMap::climberClimberDistance;
	extendLimit = RobotMap::climberExtendLimit;
	retractLimit = RobotMap::climberRetractLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Climber::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new OperatorClimb());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Climber::SetAngle(int Angle) {
	CurrentLimit();
/*	if(fabs(anglePos->GetAverageValue() - Angle) < 30) {
		angle->SetSetpoint(anglePos->GetAverageValue());
	}
	else {
		angle->SetSetpoint(Angle - angleOffset);
	}
	angleRight->Set(-angle->Get());
*/
	int correctedAngle = Angle - angleOffset;
}
void Climber::RunClimber(float speed) {
	climbLeft->Set(speed);
	climbRight->Set(speed);
}
void Climber::CurrentLimit(){
	float currentlimit = 20;
	float currenttimeout = 1.5;
	float timeoutreset = 1.5;
	if(angle->IsEnabled() && (angleLeft->GetOutputCurrent() > currentlimit || angleRight->GetOutputCurrent() > currentlimit)){
		if(SOTimer < GetClock()){
			SOTimer = GetClock()+currenttimeout;
		}
		else{
			angle->Disable();
			SOTimer = GetClock() + timeoutreset;
			}
	}
	
	if(!angle->IsEnabled() && SOTimer > GetClock())
		angle->Enable();
}

int Climber::GetCorrectedAngle() {
	return anglePos->GetAverageValue() - angleOffset;
}
